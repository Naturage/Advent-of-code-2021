} else if (common == TRUE){
return(round(temp))
} else {
return(1 - round(temp))
}
})
find_bit <- function(x, common = TRUE, tiebreaker = 1){
temp <- x %>% mean()
if (temp == 0.5){
return(tiebreaker)
} else if (common == TRUE){
return(round(temp))
} else {
return(1 - round(temp))
}
}
# Pt 1
popular_bits <- input %>%
summarise_all(function(x){x %>% mean() %>% round()})
popular_bits <- input %>%
summarise_all(function(x){x %>% mean() %>% round()})
popular_bits
popular_number <- popular_bits %>%
mutate_all(as.character) %>%
unite(ans, 1:command_length, sep = "") %>%
as.character() %>%
strtoi(base = 2)
(popular_number * (2^command_length - 1 - popular_number))
popular_bits <- input %>%
summarise_all(find_bit)
popular_bits
oxygen <- input
for (i in 1:command_length){
oxygen <- oxygen %>% filter(find_bit)
print(oxygen)
}
i <- 1
oxygen %>% filter(..i = find_bit(..i))
oxygen %>% filter(..i == find_bit(..i))
filter(i == find_bit(i))
oxygen %>% filter(i == find_bit(i))
oxygen %>% filter(..i == find_bit(i))
oxygen %>% filter(..i == find_bit(..i))
oxygen %>% mutate(temp = find_bit(bit_1))
oxygen %>% mutate(temp = find_bit(bit_1)) %>% filter(..i == temp)
oxygen %>% filter_at(i, find_bit(bit_1))
oxygen %>% filter(.[[i]] == find_bit(bit_1))
oxygen %>% filter(.[[i]] == find_bit(.[[i]]))
# Pt 2
oxygen <- input
for (i in 1:command_length){
oxygen <- oxygen %>% filter(.[[i]] == find_bit(.[[i]]))
if (nrow(oxygen) == 1){
break
}
}
oxygen
oxygen_reading <- oxygen %>%
mutate_all(as.character) %>%
unite(ans, 1:command_length, sep = "") %>%
as.character() %>%
strtoi(base = 2)
oxygen_reading
for (i in 1:command_length){
co2 <- co2 %>% filter(.[[i]] == find_bit(.[[i]], common = FALSE, tiebreaker = 0))
if (nrow(co2) == 1){
break
}
}
co2 <- input
for (i in 1:command_length){
co2 <- co2 %>% filter(.[[i]] == find_bit(.[[i]], common = FALSE, tiebreaker = 0))
if (nrow(co2) == 1){
break
}
}
co2
col_to_deci <- function(df){
df %>%
mutate_all(as.character) %>%
unite(ans, 1:command_length, sep = "") %>%
as.character() %>%
strtoi(base = 2)
}
popular_number <- col_to_deci(popular_bits)
popular_number
co2_reading <- col_to_deci(co2)
(oxygen_reading * co2_reading)
source(here::here("common functions.R"))
day <- 4
# Data input
input <- get_input(day)
input
numbers_called <- input[[1]]
numbers_called <- input[[1]] %>% strsplit(sep = ",")
?strsplit
numbers_called <- input[[1]] %>% strsplit(split = ",")
View(numbers_called)
numbers_called <- input[[1]] %>% strsplit(split = ",") %>% as.vector()
View(numbers_called)
numbers_called
numbers_called <- input[[1]] %>% strsplit(split = ",") %>% unlist()
numbers_called <- input[[1]] %>% strsplit(split = ",") %>% unlist() %>% as.numeric()
bingo_cards <- input[[-1]]
input[-1]
input[-1] %>% strsplit(split = " ")
bingo_cards <- input[-1] %>% strsplit(split = " +")
View(bingo_cards)
num_bingo_cards <- length(bingo_cards)/6
i <- 1
num_bingo_cards[6*1-5:6*i-1]
num_bingo_cards[(6*1-5):(6*i-1)]
num_bingo_cards[(6*i-5):(6*i-1)]
bingo_cards[(6*i-5):(6*i-1)]
bingo_cards[(6*i-4):(6*i)]
bingo_cards[(6*i-4):(6*i)] %>% unlist()
bingo_cards[(6*i-4):(6*i)] %>% unlist() %>% as.numeric()
matched[i] <- rep(FALSE, 25)
matched[[i]] <- rep(FALSE, 25)
matched <- list()
matched[[i]] <- rep(FALSE, 25)
View(matched)
bingo_card  <- list()
matched     <- list()
matched_row <- list()
matched_col <- list()
for (i in 1:1){
bingo_card[i] <- bingo_cards[(6*i-4):(6*i)] %>% unlist() %>% as.numeric()
matched[[i]] <- rep(FALSE, 25)
matched_row[[i]] <- rep(0, 5)
matched_col[[i]] <- rep(0, 5)
}
bingo_card  <- list()
matched     <- list()
matched_row <- list()
matched_col <- list()
for (i in 1:num_bingo_cards){
bingo_card[[i]] <- bingo_cards[(6*i-4):(6*i)] %>% unlist() %>% as.numeric()
matched[[i]] <- rep(FALSE, 25)
matched_row[[i]] <- rep(0, 5)
matched_col[[i]] <- rep(0, 5)
}
View(bingo_card)
bingo_card  <- list()
matched     <- list()
matched_row <- list()
matched_col <- list()
for (i in 1:num_bingo_cards){
bingo_card[[i]] <- bingo_cards[(6*i-4):(6*i)] %>% unlist() %>% as.numeric() %>% na.omit()
matched[[i]] <- rep(FALSE, 25)
matched_row[[i]] <- rep(0, 5)
matched_col[[i]] <- rep(0, 5)
}
View(bingo_card)
i<- 4
j <- 1
match(i, bingo_card[[j]])
i <- 34
match(i, bingo_card[[j]])
bingo_loc <- match(i, bingo_card[[j]])
i <- 25
bingo_loc <- match(i, bingo_card[[j]])
matched[[j]][[bingo_loc]] <- TRUE
matched_row[[j]][[ceiling(bingo_loc/5)]] <- matched_row[[j]][[ceiling(bingo_loc/5)]] + 1
matched_col[[j]][[bingo_loc %% 5]] <- matched_col[[j]][[ceiling(bingo_loc/5)]] + 1
View(matched)
View(matched[[1]])
matched[[1]]
matched_row[[1]]
matched_col[[1]]
sapply(1:num_bingo_cards, numbver = i)
number_draw <- function(card_id, number){
spot_on_card <- match(number, bingo_card[[card_id]])
if(!is.na(spot_on_card)){
matched[[j]][[spot_on_card]] <- TRUE
matched_row[[j]][[ceiling(spot_on_card/5)]] <- matched_row[[j]][[ceiling(spot_on_card/5)]] + 1
matched_col[[j]][[spot_on_card %% 5]] <- matched_col[[j]][[ceiling(spot_on_card %% 5)]] + 1
}
}
sapply(1:num_bingo_cards, number_draw, numbver = i)
sapply(1:num_bingo_cards, number_draw, number = i)
card_id = 1
number = 25
number_draw(card_id, number)
View(matched)
matched[[1]]
matched_row[[1]]
number_draw(card_id, number)
number_draw(card_id, number)
number_draw(card_id, number)
matched_row[[1]]
matched_col[[1]]
number_draw <- function(card_id, number){
spot_on_card <- match(number, bingo_card[[card_id]])
if(!is.na(spot_on_card)){
matched[[j]][[spot_on_card]] <- TRUE
globalenv()$matched_row[[j]][[ceiling(spot_on_card/5)]] <- matched_row[[j]][[ceiling(spot_on_card/5)]] + 1
matched_col[[j]][[spot_on_card %% 5]] <- matched_col[[j]][[ceiling(spot_on_card %% 5)]] + 1
}
}
number_draw(card_id, number)
number_draw <- function(card_id, number){
spot_on_card <- match(number, bingo_card[[card_id]])
if(!is.na(spot_on_card)){
matched[[j]][[spot_on_card]] <- TRUE
matched_row[[j]][[ceiling(spot_on_card/5)]] <- matched_row[[j]][[ceiling(spot_on_card/5)]] + 1
matched_col[[j]][[spot_on_card %% 5]] <- matched_col[[j]][[ceiling(spot_on_card %% 5)]] + 1
}
assign('matched',matched,envir=.GlobalEnv)
assign('matched_row',matched_row,envir=.GlobalEnv)
assign('matched_col',matched_col,envir=.GlobalEnv)
}
card_id = 1
number = 25
number_draw(card_id, number)
matched_col[[1]]
number_draw(card_id, number)
number_draw(card_id, number)
number_draw(card_id, number)
number_draw(card_id, number)
number_draw(card_id, number)
matched_col[[1]]
bingo_card  <- list()
matched     <- list()
matched_row <- list()
matched_col <- list()
for (i in 1:num_bingo_cards){
bingo_card[[i]] <- bingo_cards[(6*i-4):(6*i)] %>% unlist() %>% as.numeric() %>% na.omit()
matched[[i]] <- rep(FALSE, 25)
matched_row[[i]] <- rep(0, 5)
matched_col[[i]] <- rep(0, 5)
}
number_draw <- function(card_id, number){
spot_on_card <- match(number, bingo_card[[card_id]])
if(!is.na(spot_on_card)){
matched[[j]][[spot_on_card]] <<- TRUE
matched_row[[j]][[ceiling(spot_on_card/5)]] <<- matched_row[[j]][[ceiling(spot_on_card/5)]] + 1
matched_col[[j]][[spot_on_card %% 5]] <<- matched_col[[j]][[ceiling(spot_on_card %% 5)]] + 1
}
}
card_id = 1
number = 25
number_draw(card_id, number)
matched_col[[1]]
number_draw(card_id, number)
number_draw(card_id, number)
number_draw(card_id, number)
number_draw(card_id, number)
matched_col[[1]]
bingo_card  <- list()
matched     <- list()
matched_row <- list()
matched_col <- list()
for (i in 1:num_bingo_cards){
bingo_card[[i]] <- bingo_cards[(6*i-4):(6*i)] %>% unlist() %>% as.numeric() %>% na.omit()
matched[[i]] <- rep(FALSE, 25)
matched_row[[i]] <- rep(0, 5)
matched_col[[i]] <- rep(0, 5)
}
for (i in numbers_called){
sapply(1:num_bingo_cards, number_draw, number = i)
}
number_draw <- function(card_id, number){
spot_on_card <- match(number, bingo_card[[card_id]])
if(!is.na(spot_on_card)){
matched[[j]][[spot_on_card]] <<- TRUE
matched_row[[j]][[ceiling(spot_on_card/5)]] <<- matched_row[[j]][[ceiling(spot_on_card/5)]] + 1
matched_col[[j]][[(spot_on_card - 1) %% 5 + 1]] <<- matched_col[[j]][[(spot_on_card - 1) %% 5 + 1]] + 1
}
}
# Part 1
for (i in numbers_called){
sapply(1:num_bingo_cards, number_draw, number = i)
}
View(matched_col)
number_draw <- function(card_id, number){
spot_on_card <- match(number, bingo_card[[card_id]])
if(!is.na(spot_on_card)){
matched[[j]][[spot_on_card]] <<- TRUE
matched_row[[j]][[ceiling(spot_on_card/5)]] <<- matched_row[[j]][[ceiling(spot_on_card/5)]] + 1
matched_col[[j]][[(spot_on_card - 1) %% 5 + 1]] <<- matched_col[[j]][[(spot_on_card - 1) %% 5 + 1]] + 1
}
}
i <- 5
sapply(1:num_bingo_cards, number_draw, number = i)
View(bingo_cards)
View(matched)
bingo_card  <- list()
matched     <- list()
matched_row <- list()
matched_col <- list()
for (i in 1:num_bingo_cards){
bingo_card[[i]] <- bingo_cards[(6*i-4):(6*i)] %>% unlist() %>% as.numeric() %>% na.omit()
matched[[i]] <- rep(FALSE, 25)
matched_row[[i]] <- rep(0, 5)
matched_col[[i]] <- rep(0, 5)
}
number_draw <- function(card_id, number){
spot_on_card <- match(number, bingo_card[[card_id]])
if(!is.na(spot_on_card)){
matched[[card_id]][[spot_on_card]] <<- TRUE
row <- ceiling(spot_on_card/5)
col <- (spot_on_card - 1) %% 5 + 1
matched_row[[card_id]][[row]] <<- matched_row[[card_id]][[row]] + 1
matched_col[[card_id]][[col]] <<- matched_col[[card_id]][[col]] + 1
}
}
# Part 1
for (i in numbers_called){
sapply(1:num_bingo_cards, number_draw, number = i)
}
View(matched)
bingo_card  <- list()
matched     <- list()
matched_row <- list()
matched_col <- list()
for (i in 1:num_bingo_cards){
bingo_card[[i]] <- bingo_cards[(6*i-4):(6*i)] %>% unlist() %>% as.numeric() %>% na.omit()
matched[[i]] <- rep(FALSE, 25)
matched_row[[i]] <- rep(0, 5)
matched_col[[i]] <- rep(0, 5)
}
for (i in c(34, 90, 18, 33, 83)){
sapply(1:num_bingo_cards, number_draw, number = i)
}
View(matched)
View(matched_row)
matched_row %>% unlist()
matched_row %>% unlist() %>% max()
num_bingo_cards <- length(bingo_cards)/6
bingo_card  <- list()
matched     <- list()
matched_row <- list()
matched_col <- list()
for (i in 1:num_bingo_cards){
bingo_card[[i]] <- bingo_cards[(6*i-4):(6*i)] %>% unlist() %>% as.numeric() %>% na.omit()
matched[[i]] <- rep(FALSE, 25)
matched_row[[i]] <- rep(0, 5)
matched_col[[i]] <- rep(0, 5)
}
for (i in numbers_called){
sapply(1:num_bingo_cards, number_draw, number = i)
if (matched_row %>% unlist() %>% max() == 5 | matched_col %>% unlist() %>% max() == 5){
break
}
}
View(matched)
View(matched_col)
matched_row %>% unlist() %>% max() == 5
match(5, matched_col %>% unlist())
bingo_card  <- list()
matched     <- list()
matched_row <- list()
matched_col <- list()
for (i in 1:num_bingo_cards){
bingo_card[[i]] <- bingo_cards[(6*i-4):(6*i)] %>% unlist() %>% as.numeric() %>% na.omit()
matched[[i]] <- rep(FALSE, 25)
matched_row[[i]] <- rep(0, 5)
matched_col[[i]] <- rep(0, 5)
}
number_draw <- function(card_id, number){
spot_on_card <- match(number, bingo_card[[card_id]])
if(!is.na(spot_on_card)){
matched[[card_id]][[spot_on_card]] <<- TRUE
row <- ceiling(spot_on_card/5)
col <- (spot_on_card - 1) %% 5 + 1
matched_row[[card_id]][[row]] <<- matched_row[[card_id]][[row]] + 1
matched_col[[card_id]][[col]] <<- matched_col[[card_id]][[col]] + 1
}
}
# Part 1
for (i in numbers_called){
sapply(1:num_bingo_cards, number_draw, number = i)
if (matched_row %>% unlist() %>% max() == 5){
winning_number <- i
winning_card_id <- ceiling(match(5, matched_row %>% unlist()) / 5)
break
} else if (matched_col %>% unlist() %>% max() == 5){
winning_number <- i
winning_card_id <- ceiling(match(5, matched_col %>% unlist()) / 5)
break
}
}
bingo_card[[winning_card_id]]
matched[[winning_card_id]]
which(matched[[winning_card_id]] == FALSE
)
bingo_card[[winning_card_id]][which(matched[[winning_card_id]] == FALSE)]
bingo_card[[winning_card_id]][which(matched[[winning_card_id]] == FALSE)] %>% sum()
(bingo_card[[winning_card_id]][which(matched[[winning_card_id]] == FALSE)] %>% sum() * winning_number)
reset_cards <- function(){
bingo_card  <<- list()
matched     <<- list()
matched_row <<- list()
matched_col <<- list()
for (i in 1:num_bingo_cards){
bingo_card[[i]]  <<- bingo_cards[(6*i-4):(6*i)] %>% unlist() %>% as.numeric() %>% na.omit()
matched[[i]]     <<- rep(FALSE, 25)
matched_row[[i]] <<- rep(0, 5)
matched_col[[i]] <<- rep(0, 5)
}
}
reset_cards()
View(bingo_card)
View(bingo_cards)
View(matched)
number_draw <- function(card_id, number){
spot_on_card <- match(number, bingo_card[[card_id]])
if(!is.na(spot_on_card)){
matched[[card_id]][[spot_on_card]] <<- TRUE
row <- ceiling(spot_on_card/5)
col <- (spot_on_card - 1) %% 5 + 1
matched_row[[card_id]][[row]] <<- matched_row[[card_id]][[row]] + 1
matched_col[[card_id]][[col]] <<- matched_col[[card_id]][[col]] + 1
if (matched_row[[card_id]][[row]] == 5 | matched_col[[card_id]][[col]] == 5){
winner[[card_id]] == TRUE
}
}
}
reset_cards()
for (i in numbers_called){
sapply(1:num_bingo_cards, number_draw, number = i)
if (matched_row %>% unlist() %>% max() == 5){
winning_number <- i
winning_card_id <- ceiling(match(5, matched_row %>% unlist()) / 5)
break
} else if (matched_col %>% unlist() %>% max() == 5){
winning_number <- i
winning_card_id <- ceiling(match(5, matched_col %>% unlist()) / 5)
break
}
}
reset_cards <- function(){
bingo_card  <<- list()
matched     <<- list()
matched_row <<- list()
matched_col <<- list()
winner      <<- list()
for (i in 1:num_bingo_cards){
bingo_card[[i]]  <<- bingo_cards[(6*i-4):(6*i)] %>% unlist() %>% as.numeric() %>% na.omit()
matched[[i]]     <<- rep(FALSE, 25)
matched_row[[i]] <<- rep(0, 5)
matched_col[[i]] <<- rep(0, 5)
winner[[i]]      <<- FALSE
}
}
reset_cards()
for (i in numbers_called){
sapply(1:num_bingo_cards, number_draw, number = i)
if (matched_row %>% unlist() %>% max() == 5){
winning_number <- i
winning_card_id <- ceiling(match(5, matched_row %>% unlist()) / 5)
break
} else if (matched_col %>% unlist() %>% max() == 5){
winning_number <- i
winning_card_id <- ceiling(match(5, matched_col %>% unlist()) / 5)
break
}
}
View(winner)
number_draw <- function(card_id, number){
spot_on_card <- match(number, bingo_card[[card_id]])
if(!is.na(spot_on_card)){
matched[[card_id]][[spot_on_card]] <<- TRUE
row <- ceiling(spot_on_card/5)
col <- (spot_on_card - 1) %% 5 + 1
matched_row[[card_id]][[row]] <<- matched_row[[card_id]][[row]] + 1
matched_col[[card_id]][[col]] <<- matched_col[[card_id]][[col]] + 1
if (matched_row[[card_id]][[row]] == 5 | matched_col[[card_id]][[col]] == 5){
winner[[card_id]] <<- TRUE
}
}
}
reset_cards()
for (i in numbers_called){
sapply(1:num_bingo_cards, number_draw, number = i)
if (matched_row %>% unlist() %>% max() == 5){
winning_number <- i
winning_card_id <- ceiling(match(5, matched_row %>% unlist()) / 5)
break
} else if (matched_col %>% unlist() %>% max() == 5){
winning_number <- i
winning_card_id <- ceiling(match(5, matched_col %>% unlist()) / 5)
break
}
}
View(winner)
sum(winner)
sum(winner %>% unlist())
winner == TRUE
which(winner == TRUE)
reset_cards()
for (i in numbers_called){
sapply(1:num_bingo_cards, number_draw, number = i)
if (sum(winner %>% unlist()) == 1){
winning_number <- i
winning_card_id <- which(winner == TRUE)
break
}
}
(bingo_card[[winning_card_id]][which(matched[[winning_card_id]] == FALSE)] %>% sum() * winning_number)
reset_cards()
for (i in numbers_called){
sapply(1:num_bingo_cards, number_draw, number = i)
if (sum(winner %>% unlist()) == num_bingo_cards - 1){
winning_card_id <- which(winner == FALSE)
} else if (sum(winner %>% unlist()) == num_bingo_cards){
winning_number <- i
break
}
}
(bingo_card[[winning_card_id]][which(matched[[winning_card_id]] == FALSE)] %>% sum() * winning_number)
